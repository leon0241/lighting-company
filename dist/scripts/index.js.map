{
  "version": 3,
  "sources": ["../../dist/_snowpack/pkg/common/index.esm2017-d4049e44.js", "../../dist/_snowpack/pkg/firebase/app.js", "../../dist/_snowpack/pkg/firebase/analytics.js", "../../dist/scripts/index.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\n\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.28\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME$1, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME$1) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { Component as C, ErrorFactory as E, FirebaseError as F, Logger as L, _registerComponent as _, _getProvider as a, getModularInstance as b, calculateBackoffMillis as c, deepEqual as d, isIndexedDBAvailable as e, areCookiesEnabled as f, getApp as g, initializeApp as h, isBrowserExtension as i, openDB as o, registerVersion as r, validateIndexedDBOpenable as v };\n", "import { r as registerVersion } from '../common/index.esm2017-d4049e44.js';\nexport { h as initializeApp } from '../common/index.esm2017-d4049e44.js';\n\nvar name = \"firebase\";\nvar version = \"9.9.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n", "import { r as registerVersion, _ as _registerComponent, C as Component, a as _getProvider, E as ErrorFactory, F as FirebaseError, o as openDB, g as getApp, b as getModularInstance, d as deepEqual, L as Logger, i as isBrowserExtension, c as calculateBackoffMillis, e as isIndexedDBAvailable, v as validateIndexedDBOpenable, f as areCookiesEnabled } from '../common/index.esm2017-d4049e44.js';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.5.12\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_TIMEOUT_MS = 10000;\r\nconst PACKAGE_VERSION = `w:${version}`;\r\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\r\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\nconst SERVICE = 'installations';\r\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"not-registered\" /* NOT_REGISTERED */]: 'Firebase Installation is not registered.',\r\n    [\"installation-not-found\" /* INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\r\n    [\"request-failed\" /* REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    [\"app-offline\" /* APP_OFFLINE */]: 'Could not process request. Application offline.',\r\n    [\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nfunction isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getInstallationsEndpoint({ projectId }) {\r\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\r\n}\r\nfunction extractAuthTokenInfoFromResponse(response) {\r\n    return {\r\n        token: response.token,\r\n        requestStatus: 2 /* COMPLETED */,\r\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n        creationTime: Date.now()\r\n    };\r\n}\r\nasync function getErrorFromResponse(requestName, response) {\r\n    const responseJson = await response.json();\r\n    const errorData = responseJson.error;\r\n    return ERROR_FACTORY.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n        requestName,\r\n        serverCode: errorData.code,\r\n        serverMessage: errorData.message,\r\n        serverStatus: errorData.status\r\n    });\r\n}\r\nfunction getHeaders({ apiKey }) {\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\r\n    const headers = getHeaders(appConfig);\r\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n    return headers;\r\n}\r\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\r\nasync function retryIfServerError(fn) {\r\n    const result = await fn();\r\n    if (result.status >= 500 && result.status < 600) {\r\n        // Internal Server Error. Retry request.\r\n        return fn();\r\n    }\r\n    return result;\r\n}\r\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n    // This works because the server will never respond with fractions of a second.\r\n    return Number(responseExpiresIn.replace('s', '000'));\r\n}\r\nfunction getAuthorizationHeader(refreshToken) {\r\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {\r\n    const endpoint = getInstallationsEndpoint(appConfig);\r\n    const headers = getHeaders(appConfig);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        fid,\r\n        authVersion: INTERNAL_AUTH_VERSION,\r\n        appId: appConfig.appId,\r\n        sdkVersion: PACKAGE_VERSION\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const registeredInstallationEntry = {\r\n            fid: responseValue.fid || fid,\r\n            registrationStatus: 2 /* COMPLETED */,\r\n            refreshToken: responseValue.refreshToken,\r\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n        };\r\n        return registeredInstallationEntry;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Create Installation', response);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a promise that resolves after given time passes. */\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction bufferToBase64UrlSafe(array) {\r\n    const b64 = btoa(String.fromCharCode(...array));\r\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nconst INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nfunction generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        const fidByteArray = new Uint8Array(17);\r\n        const crypto = self.crypto || self.msCrypto;\r\n        crypto.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\r\n        const fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a string key that can be used to identify the app. */\r\nfunction getKey(appConfig) {\r\n    return `${appConfig.appName}!${appConfig.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst fidChangeCallbacks = new Map();\r\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\r\nfunction fidChanged(appConfig, fid) {\r\n    const key = getKey(appConfig);\r\n    callFidChangeCallbacks(key, fid);\r\n    broadcastFidChange(key, fid);\r\n}\r\nfunction callFidChangeCallbacks(key, fid) {\r\n    const callbacks = fidChangeCallbacks.get(key);\r\n    if (!callbacks) {\r\n        return;\r\n    }\r\n    for (const callback of callbacks) {\r\n        callback(fid);\r\n    }\r\n}\r\nfunction broadcastFidChange(key, fid) {\r\n    const channel = getBroadcastChannel();\r\n    if (channel) {\r\n        channel.postMessage({ key, fid });\r\n    }\r\n    closeBroadcastChannel();\r\n}\r\nlet broadcastChannel = null;\r\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\r\nfunction getBroadcastChannel() {\r\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\r\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\r\n        broadcastChannel.onmessage = e => {\r\n            callFidChangeCallbacks(e.data.key, e.data.fid);\r\n        };\r\n    }\r\n    return broadcastChannel;\r\n}\r\nfunction closeBroadcastChannel() {\r\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\r\n        broadcastChannel.close();\r\n        broadcastChannel = null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DATABASE_NAME = 'firebase-installations-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function set(appConfig, value) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await objectStore.get(key));\r\n    await objectStore.put(value, key);\r\n    await tx.done;\r\n    if (!oldValue || oldValue.fid !== value.fid) {\r\n        fidChanged(appConfig, value.fid);\r\n    }\r\n    return value;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function remove(appConfig) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.done;\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nasync function update(appConfig, updateFn) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const store = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await store.get(key));\r\n    const newValue = updateFn(oldValue);\r\n    if (newValue === undefined) {\r\n        await store.delete(key);\r\n    }\r\n    else {\r\n        await store.put(newValue, key);\r\n    }\r\n    await tx.done;\r\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\r\n        fidChanged(appConfig, newValue.fid);\r\n    }\r\n    return newValue;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nasync function getInstallationEntry(installations) {\r\n    let registrationPromise;\r\n    const installationEntry = await update(installations.appConfig, oldEntry => {\r\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\r\n        registrationPromise = entryWithPromise.registrationPromise;\r\n        return entryWithPromise.installationEntry;\r\n    });\r\n    if (installationEntry.fid === INVALID_FID) {\r\n        // FID generation failed. Waiting for the FID from the server.\r\n        return { installationEntry: await registrationPromise };\r\n    }\r\n    return {\r\n        installationEntry,\r\n        registrationPromise\r\n    };\r\n}\r\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    const entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* NOT_STARTED */\r\n    };\r\n    return clearTimedOutRequest(entry);\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\r\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\r\n            return {\r\n                installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        const inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        const registrationPromise = registerInstallation(installations, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        return {\r\n            installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(installations)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nasync function registerInstallation(installations, installationEntry) {\r\n    try {\r\n        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\r\n        return set(installations.appConfig, registeredInstallationEntry);\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) && e.customData.serverCode === 409) {\r\n            // Server returned a \"FID can not be used\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            // Registration failed. Set FID as not registered.\r\n            await set(installations.appConfig, {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/** Call if FID registration is pending in another request. */\r\nasync function waitUntilFidRegistration(installations) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateInstallationRequest(installations.appConfig);\r\n    while (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        // createInstallation request still in progress.\r\n        await sleep(100);\r\n        entry = await updateInstallationRequest(installations.appConfig);\r\n    }\r\n    if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);\r\n        if (registrationPromise) {\r\n            return registrationPromise;\r\n        }\r\n        else {\r\n            // if there is no registrationPromise, entry is registered.\r\n            return installationEntry;\r\n        }\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n        }\r\n        return clearTimedOutRequest(oldEntry);\r\n    });\r\n}\r\nfunction clearTimedOutRequest(entry) {\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {\r\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        installation: {\r\n            sdkVersion: PACKAGE_VERSION,\r\n            appId: appConfig.appId\r\n        }\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n        return completedAuthToken;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Generate Auth Token', response);\r\n    }\r\n}\r\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nasync function refreshAuthToken(installations, forceRefresh = false) {\r\n    let tokenPromise;\r\n    const entry = await update(installations.appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\r\n            // There is a valid token in the DB.\r\n            return oldEntry;\r\n        }\r\n        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n            // There already is a token request in progress.\r\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\r\n            return oldEntry;\r\n        }\r\n        else {\r\n            // No token or token expired.\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\r\n            return inProgressEntry;\r\n        }\r\n    });\r\n    const authToken = tokenPromise\r\n        ? await tokenPromise\r\n        : entry.authToken;\r\n    return authToken;\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\r\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateAuthTokenRequest(installations.appConfig);\r\n    while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n        // generateAuthToken still in progress.\r\n        await sleep(100);\r\n        entry = await updateAuthTokenRequest(installations.appConfig);\r\n    }\r\n    const authToken = entry.authToken;\r\n    if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        return refreshAuthToken(installations, forceRefresh);\r\n    }\r\n    else {\r\n        return authToken;\r\n    }\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\r\n    try {\r\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\r\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });\r\n        await set(installations.appConfig, updatedInstallationEntry);\r\n        return authToken;\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) &&\r\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\r\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            await set(installations.appConfig, updatedInstallationEntry);\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    const now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    const inProgressAuthToken = {\r\n        requestStatus: 1 /* IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function getId(installations) {\r\n    const installationsImpl = installations;\r\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);\r\n    if (registrationPromise) {\r\n        registrationPromise.catch(console.error);\r\n    }\r\n    else {\r\n        // If the installation is already registered, update the authentication\r\n        // token if needed.\r\n        refreshAuthToken(installationsImpl).catch(console.error);\r\n    }\r\n    return installationEntry.fid;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getToken(installations, forceRefresh = false) {\r\n    const installationsImpl = installations;\r\n    await completeInstallationRegistration(installationsImpl);\r\n    // At this point we either have a Registered Installation in the DB, or we've\r\n    // already thrown an error.\r\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\r\n    return authToken.token;\r\n}\r\nasync function completeInstallationRegistration(installations) {\r\n    const { registrationPromise } = await getInstallationEntry(installations);\r\n    if (registrationPromise) {\r\n        // A createInstallation request is in progress. Wait until it finishes.\r\n        await registrationPromise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId'\r\n    ];\r\n    for (const keyName of configKeys) {\r\n        if (!app.options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: app.options.projectId,\r\n        apiKey: app.options.apiKey,\r\n        appId: app.options.appId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INSTALLATIONS_NAME = 'installations';\r\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\r\nconst publicFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Throws if app isn't configured properly.\r\n    const appConfig = extractAppConfig(app);\r\n    const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n    const installationsImpl = {\r\n        app,\r\n        appConfig,\r\n        heartbeatServiceProvider,\r\n        _delete: () => Promise.resolve()\r\n    };\r\n    return installationsImpl;\r\n};\r\nconst internalFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Internal FIS instance relies on public FIS instance.\r\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\r\n    const installationsInternal = {\r\n        getId: () => getId(installations),\r\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\r\n    };\r\n    return installationsInternal;\r\n};\r\nfunction registerInstallations() {\r\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* PUBLIC */));\r\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n}\n\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterInstallations();\r\nregisterVersion(name, version);\r\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\nregisterVersion(name, version, 'esm2017');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nconst ANALYTICS_TYPE = 'analytics';\r\n// Key to attach FID to in gtag params.\r\nconst GA_FID_KEY = 'firebase_id';\r\nconst ORIGIN_KEY = 'origin';\r\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\r\nfunction promiseAllSettled(promises) {\r\n    return Promise.all(promises.map(promise => promise.catch(e => e)));\r\n}\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    const script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    let dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\r\n    /// are waiting for, and wait only on that one.\r\n    const correspondingAppId = measurementIdToAppId[measurementId];\r\n    try {\r\n        if (correspondingAppId) {\r\n            await initializationPromisesMap[correspondingAppId];\r\n        }\r\n        else {\r\n            // If config is not fetched yet, wait for all configs (we don't know which one we need) and\r\n            // find the appId (if any) corresponding to this measurementId. If there is one, wait on\r\n            // that appId's initialization promise. If there is none, promise resolves and gtag\r\n            // call goes through.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\r\n            if (foundConfig) {\r\n                await initializationPromisesMap[foundConfig.appId];\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n    gtagCore(\"config\" /* CONFIG */, measurementId, gtagParams);\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    try {\r\n        let initializationPromisesToWaitFor = [];\r\n        // If there's a 'send_to' param, check if any ID specified matches\r\n        // an initializeIds() promise we are waiting for.\r\n        if (gtagParams && gtagParams['send_to']) {\r\n            let gaSendToList = gtagParams['send_to'];\r\n            // Make it an array if is isn't, so it can be dealt with the same way.\r\n            if (!Array.isArray(gaSendToList)) {\r\n                gaSendToList = [gaSendToList];\r\n            }\r\n            // Checking 'send_to' fields requires having all measurement ID results back from\r\n            // the dynamic config fetch.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            for (const sendToId of gaSendToList) {\r\n                // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\r\n                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                if (initializationPromise) {\r\n                    initializationPromisesToWaitFor.push(initializationPromise);\r\n                }\r\n                else {\r\n                    // Found an item in 'send_to' that is not associated\r\n                    // directly with an FID, possibly a group.  Empty this array,\r\n                    // exit the loop early, and let it get populated below.\r\n                    initializationPromisesToWaitFor = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // This will be unpopulated if there was no 'send_to' field , or\r\n        // if not all entries in the 'send_to' field could be mapped to\r\n        // a FID. In these cases, wait on all pending initialization promises.\r\n        if (initializationPromisesToWaitFor.length === 0) {\r\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n        }\r\n        // Run core gtag function with args after all relevant initialization\r\n        // promises have been resolved.\r\n        await Promise.all(initializationPromisesToWaitFor);\r\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n        gtagCore(\"event\" /* EVENT */, measurementId, gtagParams || {});\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    async function gtagWrapper(command, idOrNameOrParams, gtagParams) {\r\n        try {\r\n            // If event, check that relevant initialization promises have completed.\r\n            if (command === \"event\" /* EVENT */) {\r\n                // If EVENT, second arg must be measurementId.\r\n                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams);\r\n            }\r\n            else if (command === \"config\" /* CONFIG */) {\r\n                // If CONFIG, second arg must be measurementId.\r\n                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams);\r\n            }\r\n            else if (command === \"consent\" /* CONSENT */) {\r\n                // If CONFIG, second arg must be measurementId.\r\n                gtagCore(\"consent\" /* CONSENT */, 'update', gtagParams);\r\n            }\r\n            else {\r\n                // If SET, second arg must be params.\r\n                gtagCore(\"set\" /* SET */, idOrNameOrParams);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.error(e);\r\n        }\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    let gtagCore = function (..._args) {\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    const scriptTags = window.document.getElementsByTagName('script');\r\n    for (const tag of Object.values(scriptTags)) {\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-exists\" /* ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    [\"already-initialized\" /* ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +\r\n        'it was initially called with. It can be called again with the same options to ' +\r\n        'return the existing instance, or getAnalytics() can be used ' +\r\n        'to get a reference to the already-intialized instance.',\r\n    [\"already-initialized-settings\" /* ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    [\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    [\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"fetch-throttle\" /* FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    [\"no-api-key\" /* NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    [\"no-app-id\" /* NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.'\r\n};\r\nconst ERROR_FACTORY$1 = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nconst LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nconst BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nclass RetryData {\r\n    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    getThrottleMetadata(appId) {\r\n        return this.throttleMetadata[appId];\r\n    }\r\n    setThrottleMetadata(appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    }\r\n    deleteThrottleMetadata(appId) {\r\n        delete this.throttleMetadata[appId];\r\n    }\r\n}\r\nconst defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders$1(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    const { appId, apiKey } = appFields;\r\n    const request = {\r\n        method: 'GET',\r\n        headers: getHeaders$1(apiKey)\r\n    };\r\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n    const response = await fetch(appUrl, request);\r\n    if (response.status !== 200 && response.status !== 304) {\r\n        let errorMessage = '';\r\n        try {\r\n            // Try to get any error message text from server response.\r\n            const jsonResponse = (await response.json());\r\n            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                errorMessage = jsonResponse.error.message;\r\n            }\r\n        }\r\n        catch (_ignored) { }\r\n        throw ERROR_FACTORY$1.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\r\n            httpStatus: response.status,\r\n            responseMessage: errorMessage\r\n        });\r\n    }\r\n    return response.json();\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData = defaultRetryData, timeoutMillis) {\r\n    const { appId, apiKey, measurementId } = app.options;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY$1.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!apiKey) {\r\n        if (measurementId) {\r\n            return {\r\n                measurementId,\r\n                appId\r\n            };\r\n        }\r\n        throw ERROR_FACTORY$1.create(\"no-api-key\" /* NO_API_KEY */);\r\n    }\r\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n        backoffCount: 0,\r\n        throttleEndTimeMillis: Date.now()\r\n    };\r\n    const signal = new AnalyticsAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        signal.abort();\r\n    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nasync function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing\r\n) {\r\n    var _a, _b;\r\n    const { appId, measurementId } = appFields;\r\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n    // Ensures the throttle end time is honored if the last attempt timed out.\r\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n    try {\r\n        await setAbortableTimeout(signal, throttleEndTimeMillis);\r\n    }\r\n    catch (e) {\r\n        if (measurementId) {\r\n            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +\r\n                ` Falling back to the measurement ID ${measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config. [${(_a = e) === null || _a === void 0 ? void 0 : _a.message}]`);\r\n            return { appId, measurementId };\r\n        }\r\n        throw e;\r\n    }\r\n    try {\r\n        const response = await fetchDynamicConfig(appFields);\r\n        // Note the SDK only clears throttle state if response is success or non-retriable.\r\n        retryData.deleteThrottleMetadata(appId);\r\n        return response;\r\n    }\r\n    catch (e) {\r\n        const error = e;\r\n        if (!isRetriableError(error)) {\r\n            retryData.deleteThrottleMetadata(appId);\r\n            if (measurementId) {\r\n                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +\r\n                    ` Falling back to the measurement ID ${measurementId}` +\r\n                    ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\r\n                return { appId, measurementId };\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        const backoffMillis = Number((_b = error === null || error === void 0 ? void 0 : error.customData) === null || _b === void 0 ? void 0 : _b.httpStatus) === 503\r\n            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n        // Increments backoff state.\r\n        const throttleMetadata = {\r\n            throttleEndTimeMillis: Date.now() + backoffMillis,\r\n            backoffCount: backoffCount + 1\r\n        };\r\n        // Persists state.\r\n        retryData.setThrottleMetadata(appId, throttleMetadata);\r\n        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\r\n        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\r\n    }\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY$1.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass AnalyticsAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"event\" /* EVENT */, eventName, eventParams);\r\n        return;\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        const params = Object.assign(Object.assign({}, eventParams), { 'send_to': measurementId });\r\n        gtagFunction(\"event\" /* EVENT */, eventName, params);\r\n    }\r\n}\r\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function validateIndexedDB() {\r\n    var _a;\r\n    if (!isIndexedDBAvailable()) {\r\n        logger.warn(ERROR_FACTORY$1.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n            errorInfo: 'IndexedDB is not available in this environment.'\r\n        }).message);\r\n        return false;\r\n    }\r\n    else {\r\n        try {\r\n            await validateIndexedDBOpenable();\r\n        }\r\n        catch (e) {\r\n            logger.warn(ERROR_FACTORY$1.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                errorInfo: (_a = e) === null || _a === void 0 ? void 0 : _a.toString()\r\n            }).message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\r\n    var _a;\r\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n    dynamicConfigPromise\r\n        .then(config => {\r\n        measurementIdToAppId[config.measurementId] = config.appId;\r\n        if (app.options.measurementId &&\r\n            config.measurementId !== app.options.measurementId) {\r\n            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +\r\n                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\r\n                ` To ensure analytics events are always sent to the correct Analytics property,` +\r\n                ` update the` +\r\n                ` measurement ID field in the local config or remove it from the local config.`);\r\n        }\r\n    })\r\n        .catch(e => logger.error(e));\r\n    // Add to list to track state of all dynamic config promises.\r\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n    const fidPromise = validateIndexedDB().then(envIsValid => {\r\n        if (envIsValid) {\r\n            return installations.getId();\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    });\r\n    const [dynamicConfig, fid] = await Promise.all([\r\n        dynamicConfigPromise,\r\n        fidPromise\r\n    ]);\r\n    // Detect if user has already put the gtag <script> tag on this page.\r\n    if (!findGtagScriptOnPage()) {\r\n        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n    }\r\n    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n    // but since it is idempotent, we can call it multiple times.\r\n    // We keep it together with other initialization logic for better code structure.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    gtagCore('js', new Date());\r\n    // User config added first. We don't want users to accidentally overwrite\r\n    // base Firebase config properties.\r\n    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\r\n    // guard against developers accidentally setting properties with prefix `firebase_`\r\n    configProperties[ORIGIN_KEY] = 'firebase';\r\n    configProperties.update = true;\r\n    if (fid != null) {\r\n        configProperties[GA_FID_KEY] = fid;\r\n    }\r\n    // It should be the first config command called on this GA-ID\r\n    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n    // `configProperties`.\r\n    gtagCore(\"config\" /* CONFIG */, dynamicConfig.measurementId, configProperties);\r\n    return dynamicConfig.measurementId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Analytics Service class.\r\n */\r\nclass AnalyticsService {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    _delete() {\r\n        delete initializationPromisesMap[this.app.options.appId];\r\n        return Promise.resolve();\r\n    }\r\n}\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nlet initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nlet dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nconst measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nlet dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nlet gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nlet gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nlet wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nlet globalInitDone = false;\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    const mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        const details = mismatchedEnvMessages\r\n            .map((message, index) => `(${index + 1}) ${message}`)\r\n            .join(' ');\r\n        const err = ERROR_FACTORY$1.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\r\nfunction factory(app, installations, options) {\r\n    warnOnBrowserContextMismatch();\r\n    const appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY$1.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\r\n                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config.`);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY$1.create(\"no-api-key\" /* NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY$1.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\r\n    const analyticsInstance = new AnalyticsService(app);\r\n    return analyticsInstance;\r\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction getAnalytics(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        return analyticsProvider.getImmediate();\r\n    }\r\n    return initializeAnalytics(app);\r\n}\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction initializeAnalytics(app, options = {}) {\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        const existingInstance = analyticsProvider.getImmediate();\r\n        if (deepEqual(options, analyticsProvider.getOptions())) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY$1.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const analyticsInstance = analyticsProvider.initialize({ options });\r\n    return analyticsInstance;\r\n}\r\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\r\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\r\n}\r\n\nconst name$1 = \"@firebase/analytics\";\nconst version$1 = \"0.8.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction registerAnalytics() {\r\n    _registerComponent(new Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        return factory(app, installations, analyticsOptions);\r\n    }, \"PUBLIC\" /* PUBLIC */));\r\n    _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n    registerVersion(name$1, version$1);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$1, version$1, 'esm2017');\r\n    function internalFactory(container) {\r\n        try {\r\n            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY$1.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics();\n\nexport { getAnalytics };\n", "import {initializeApp} from \"../_snowpack/pkg/firebase/app.js\";\nimport {getAnalytics} from \"../_snowpack/pkg/firebase/analytics.js\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-TbrOOamvPc8vmpAguCvM66FvgcbCubc\",\n  authDomain: \"c-productions.firebaseapp.com\",\n  projectId: \"c-productions\",\n  storageBucket: \"c-productions.appspot.com\",\n  messagingSenderId: \"287512484062\",\n  appId: \"1:287512484062:web:965ed911fbe4cb63898a4f\",\n  measurementId: \"G-8RENRXBMJV\"\n};\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconsole.log(\"hello world\");\n"],
  "mappings": "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",
  "names": []
}
